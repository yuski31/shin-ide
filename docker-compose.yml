version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: webide-postgres
    environment:
      POSTGRES_DB: webide
      POSTGRES_USER: webide_user
      POSTGRES_PASSWORD: webide_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - webide-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webide_user -d webide"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: webide-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - webide-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: webide-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://webide_user:webide_password@postgres:5432/webide
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      PORT: 3000
      FRONTEND_URL: http://localhost:5173
    ports:
      - "3000:3000"
    volumes:
      - ./uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock  # For container management
    networks:
      - webide-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: webide-frontend
    environment:
      VITE_API_URL: http://localhost:3000
      VITE_WS_URL: ws://localhost:3000
    ports:
      - "5173:5173"
    networks:
      - webide-network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: webide-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    networks:
      - webide-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # Development Database Admin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: webide-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@webide.com
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - webide-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - development

  # Redis Commander (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: webide-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    networks:
      - webide-network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  webide-network:
    driver: bridge
